#!/usr/bin/env python -u
import click
from fabric.colors import yellow
from fabric.network import disconnect_all
from fabric.operations import run as fabric_run
from fabric.state import env
from fabric.tasks import execute as fabric_execute
from stevedore import driver as plugin_driver
from stevedore import extension
from calyptos.rolebuilder import RoleBuilder
import os
import shutil

dot_dir = os.path.expanduser('~/.calyptos')
# by default we look in users home dir first
default_cfgfile = os.path.join(dot_dir, "config.yml")
cfglist = []
cfglist.append(default_cfgfile)
cfglist.append('/usr/share/calyptos/config.yml')

def locate_cfgfile():
    # if we find that the config file is in /usr/share
    # but the rpm is not installed, we copy it to ~/.calyptos
    # because that means calyptos was installed by setup.py
    for item in cfglist:
        if os.path.isfile(item):
            if item != default_cfgfile:
                import rpm # I think this is required by other parts of python so I'm safe using it
                ts = rpm.TransactionSet()
                mi = ts.dbMatch("name","calyptos")
                if (len(mi) == 0):
                    if not os.path.isfile(default_cfgfile):
                        if not os.path.exists(dot_dir):
                            try:
                                os.makedirs(dot_dir)
                            except OSError as e:
                                print('Error: cannot create directory ~/.calyptos: %s' % e)
                        try:
                            # if this copy works, return default_cfgfile
                            # because it will be used going forward
                            shutil.copy('/usr/share/calyptos/config.yml', default_cfgfile)
                            return default_cfgfile
                        except shutil.Error as e:
                            print('Error: %s' % e)
                        except IOError as e:
                            print('Error: %s' % e.strerror)
            # this is not in an else: block because its a
            # last resort for the case where import rpm
            # doesn't succeed above, because we still need
            # to return a valid config file name
            return item

def run_driver(namespace, driver, operation, ctx):
    mgr = plugin_driver.DriverManager(
            namespace=namespace,
            name=driver,
            invoke_on_load=True,
            invoke_args=(ctx.obj['password'],
                         ctx.obj['environment'],
                         ctx.obj['config'],
                         ctx.obj['debug'],
                         ctx.obj['branch']),
        )
    function = getattr(mgr.driver, operation)
    function()

@click.option('-c', '--config', default=locate_cfgfile(), show_default=True, help='Path to the configuration file for Calyptos')
@click.option('-e', '--environment', required=True, help='Path to the environment file that defines the system Calyptos will interact with')
@click.option('-p', '--password', prompt='Enter the SSH password for hosts in the deployment', help='SSH password for machines that Calyptos will interact with')
@click.option('--debug', default=False)
@click.group()
@click.pass_context
def cli(ctx, config, environment, password, debug):
    ctx.obj['config'] = config
    ctx.obj['environment'] = environment
    ctx.obj['password'] = password
    ctx.obj['debug'] = debug


@cli.command()
@click.pass_context
def validate(ctx):
    component_deployer = RoleBuilder(ctx.obj['environment'])
    mgr = extension.ExtensionManager(
            namespace='calyptos.validator',
            invoke_args=(component_deployer,),
            invoke_on_load=True,
            propagate_map_exceptions=True
        )
    results = mgr.map_method('validate')

@click.option('-b', '--branch', default='euca-4.2')
@click.option('--cookbook-repo', default='https://github.com/eucalyptus/eucalyptus-cookbook')
@click.option('-d', '--driver', default="chef")
@cli.command()
@click.pass_context
def prepare(ctx, branch, cookbook_repo, driver):
    ctx.obj['cookbook-repo'] = cookbook_repo
    ctx.obj['branch'] = branch
    run_driver('calyptos.deployer', driver, 'prepare', ctx)


@click.option('-b', '--branch', default='euca-4.2')
@click.option('--cookbook-repo', default='https://github.com/eucalyptus/eucalyptus-cookbook')
@click.option('-d', '--driver', default="chef")
@cli.command()
@click.pass_context
def bootstrap(ctx, branch, cookbook_repo, driver):
    ctx.obj['cookbook-repo'] = cookbook_repo
    ctx.obj['branch'] = branch
    run_driver('calyptos.deployer', driver, 'bootstrap', ctx)

@click.option('-b', '--branch', default='euca-4.2')
@click.option('--cookbook-repo', default='https://github.com/eucalyptus/eucalyptus-cookbook')
@click.option('-d', '--driver', default="chef")
@cli.command()
@click.pass_context
def provision(ctx, branch, cookbook_repo, driver):
    ctx.obj['cookbook-repo'] = cookbook_repo
    ctx.obj['branch'] = branch
    run_driver('calyptos.deployer', driver, 'provision', ctx)

@click.option('-b', '--branch', default='euca-4.2')
@click.option('--cookbook-repo', default='https://github.com/eucalyptus/eucalyptus-cookbook')
@click.option('-d', '--driver', default="chef")
@cli.command()
@click.pass_context
def uninstall(ctx, branch, cookbook_repo, driver):
    ctx.obj['cookbook-repo'] = cookbook_repo
    ctx.obj['branch'] = branch
    run_driver('calyptos.deployer', driver, 'uninstall', ctx)


@click.argument('command')
@click.option('-r', '--role', default='all')
@cli.command()
@click.pass_context
def execute(ctx, command, role):
    component_deployer = RoleBuilder(ctx.obj['environment'])
    env.hosts = component_deployer.roles[role]
    env.password = ctx.obj['password']
    env.user = 'root'
    fabric_execute(fabric_run, command, hosts=component_deployer.roles[role])
    disconnect_all()

@cli.command()
def debug(ctx):
    component_deployer = RoleBuilder(ctx.obj['environment'])
    mgr = extension.ExtensionManager(
            namespace='calyptos.debugger',
            invoke_args=(component_deployer,),
            invoke_on_load=True,
            propagate_map_exceptions=False
        )
    results = mgr.map_method('debug')
    total_failures = 0
    total_passed = 0
    for passed, failed in results:
        total_passed += passed
        total_failures += failed
    print yellow('Total passed: ' + str(total_passed))
    print yellow('Total failed: ' + str(total_failures))
    exit(total_failures)

if __name__ == '__main__':
    cli.add_command(validate)
    cli.add_command(prepare)
    cli.add_command(bootstrap)
    cli.add_command(provision)
    cli.add_command(debug)
    cli.add_command(execute)
    cli(obj={})
